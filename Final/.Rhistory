with(yelp_user_summary, plot(review_count, fans))
with(yelp_user_summary, plot(fans, review_count))
with(yelp_user_summary, plot(yelping_since, review_count))
with(yelp_user_summary, plot(yelping_since, fans))
with(yelp_user_summary, plot(yelping_since, average_stars))
with(yelp_user_summary, plot(average_stars, yelping_since))
counts <- table(yelp_user_summary$average_stars)
barplot(counts, main="average_stars",
xlab="Number of average")
counts
summary(counts)
with(yelp_user_summary, plot(counts))
with(yelp_user_summary, plot(average_stars, fans))
av1 = rnorm(100); av2 = rt(100,df=3)
plot(density(av1));plot(density(av2))
shapiro.test(av1); shapiro.test(av2)
qqnorm(av1);qqline(av1,col =2)
qqnorm(av2);qqline(av2,col =2)
summary(yelp_user_summary)
qqnorm(yelp_user_summary$review_count,yelp_user_summary$average_stars)
qqnorm(yelp_user_summary$review_count)
review_count <- yelp_user_summary$review_count
average_stars <- yelp_user_summary$average_stars
qqnorm(review_count$average_stars)
qqnorm(review_count, average_stars)
?qqnorm
qqnorm(yelp_user_summary$average_stars)
qqnorm(yelp_user_summary$review_count)
summary(yelp_user_summary)
qqnorm(yelp_user_summary$fans)
yelp <- yelp_use_summary
library(swirl)
swirl()
View(cran2)
install.packages("lpSolveAPI")
install.packages("gridExtra")
library(lpSolveAPI)
#used for result visualization
library(ggplot2)
library(reshape)
library(gridExtra)
#define the datasets
train<-data.frame(wagon=c('w1','w2','w3'), weightcapacity=c(10,8,12), spacecapacity=c(5000,4000,8000))
cargo<-data.frame(type=c('c1','c2','c3','c4'), available=c(18,10,5,20), volume=c(400,300,200,500),profit=c(2000,2500,5000,3500))
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
iris
head(iris)
install.packages(ggvis)
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points() - Read more at: http://scl.io/raimhAbo#gs.dPgEnT8
installed.packages("ggvis")
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points() - Read more at: http://scl.io/raimhAbo#gs.dPgEnT8
installed.packages("class")
installed.packages("caret")
install.packages("caret")
install.packages("class")
install.packages("ggvis")
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points() - Read more at: http://scl.io/raimhAbo#gs.dPgEnT8
install.packages("randomForest")
library(caret)
library(randomForest)
Titanic
summary(Titanic)
head(Titanic)
install.packages("Rglpk")
install.packages("Rsymphony")
install.packages("tdyr")
install.packages("tidyr")
obj . fun <- c(20 , 60)
constr <- matrix (c(30 , 20 , 5 , 10 , 1 , 1) , ncol = 2 , byrow =
TRUE )
constr . dir <- c(" <=", " <=", " >=")
rhs <- c(2700 , 850 , 95)
10 #solving model
prod . sol <- lp ("max", obj . fun , constr , constr .dir , rhs ,
compute . sens = TRUE )
library(lpSolveAPI)
obj.fun <- c(20 , 60)
constr <- matrix (c(30 , 20 , 5 , 10 , 1 , 1) , ncol = 2 , byrow =TRUE )
constr.dir <- c(" <=", " <=", " >=")
rhs <- c(2700 , 850 , 95)
10 #solving model
prod.sol <- lp ("max", obj.fun , constr , constr.dir, rhs ,compute . sens = TRUE )
obj.fun <- c(20 , 60)
constr <- matrix (c(30 , 20 , 5 , 10 , 1 , 1) , ncol = 2 , byrow =TRUE )
constr.dir <- c(" <=", " <=", " >=")
rhs <- c(2700 , 850 , 95)
10 #solving model
prod.sol <- lp ("max", obj.fun , constr , constr.dir, rhs ,compute.sens = TRUE )
library(lpSolve)
install.packages("lpSolve")
library(lpSolve)
obj.fun <- c(20 , 60)
constr <- matrix (c(30 , 20 , 5 , 10 , 1 , 1) , ncol = 2 , byrow =TRUE )
constr.dir <- c(" <=", " <=", " >=")
rhs <- c(2700 , 850 , 95)
10 #solving model
prod.sol <- lp ("max", obj.fun , constr , constr.dir, rhs ,compute.sens = TRUE )
5/37
37/43
37/42
######### Web Scraping #########
# Load needded libraries
library(XML) # For scraping the HTML tables
library(dplyr) # Data manipulation library
library(lubridate) # For data manipulation
library(stringi) # Provides a host of string opperations
library(reshape) # melt data
# Harvest data
url.mlb <- "http://www.espn.com/mlb/standings"
## Get the raw HTML data
tables <- readHTMLTable(url.mlb, header = FALSE,
stringsAsFactors = FALSE)
standings.df <- data.frame(tables)
al <- standings.df$NULL.V1
al <- data.frame(standings.df$NULL.V1)
View(al)
al <- data.frame(standings.df$NULL.V1,standings.df$NULL.V1.1)
al <- data.frame(standings.df$NULL.V1,standings.df$NULL.V2,standings.df$NULL.V3,standings.df$NULL.V4,
standings.df$NULL.V5,standings.df$NULL.V6,standings.df$NULL.V7,standings.df$NULL.V8,
standings.df$NULL.V9,standings.df$NULL.V10,standings.df$NULL.V11,standings.df$NULL.V12,
standings.df$NULL.V13)
nl <- data.frame(standings.df$NULL.V1.1,standings.df$NULL.V2.1,standings.df$NULL.V3.1,standings.df$NULL.V4.1,
standings.df$NULL.V5.1,standings.df$NULL.V6.1,standings.df$NULL.V7.1,standings.df$NULL.V8.1,
standings.df$NULL.V9.1,standings.df$NULL.V10.1,standings.df$NULL.V11.1,standings.df$NULL.V12.1,
standings.df$NULL.V13.1)
View(nl)
colnames(al) <- c("Team","Wins","Losses","PCT", "Games Back", "Home", "Road","F","RA","Diff",
"STRK", "L10", "POFF")
library(psych) #descriptive stats
describe(al)
describe(nl)
#assign column names
colnames(nl) <- c("Team","Wins","Losses","PCT", "Games Back", "Home", "Road","F","RA","Diff",
"STRK", "L10", "POFF")
describe(nl)
nl$Wins
mean(al$Wins)
mean(as.numeric(al$Wins))
as.numeric(al$Wins)
al[, 2:5,8,9,12] <- sapply(al[,2:5,8,9,12], as.factor)
al[, c(2:5,8,9,12)] <- sapply(al[, c(2:5,8,9,12)], as.factor)
#make numbers numeric
nl[, c(2:5,8,9,12)] <- sapply(nl[, c(2:5,8,9,12)], as.factor)
describe(al)
shiny::runApp('C:/Users/turman/Desktop/Q2/804w/hw5')
runApp('C:/Users/turman/Desktop/Q2/804w/hw5')
library(shiny)
library(tm)
library(wordcloud)
library(twitteR)
runApp('C:/Users/turman/Desktop')
runApp('C:/Users/turman/Desktop')
runApp('C:/Users/turman/Desktop')
runApp('C:/Users/turman/Desktop')
runApp('C:/Users/turman/Desktop')
runApp('C:/Users/turman/Desktop')
#db settings
host = 'localhost'
port = '5432'
dbname = 'flights'
user = 'flights'
pwd = 'flights'
library(dplyr)
library(DBI)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
source("src/dbSettings.R")
flight.db<-dbConnect(drv,
host = host,
port = port,
dbname=dbname,
user=user,
password=pwd)
library(dplyr)
library(DBI)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
source("src/dbSettings.R")
flight.db<-dbConnect(drv,
host = host,
port = port,
dbname=dbname,
user=user,
password=pwd)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
library(psych)
library(dplyr)
library(qcc)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(psych)
library(dplyr)
library(qcc)
library(ggplot2)
#flights.df <- read.csv("On_Time_On_Time_Performance_2016_8.csv",header=TRUE,stringsAsFactors = FALSE)
source('src/dbSettings.R')
flights.db <- src_postgres(dbname = dbname,
host = host,
port = port,
user = user,
password = pwd)
flights <- tbl(flights.db, "connections")
# Check if everything was insert correctly
flights %>%
distinct(Month) %>%
arrange(Month) %>%
collect(n= Inf)
flights.df <- flights %>%
select(FlightDate, CRSDepTime, DepDelayMinutes, UniqueCarrier, Origin) %>%
filter(UniqueCarrier == "UA") %>%
collect(n=Inf)
flight.df <- flights %>%
select(FlightDate, DepTime, DepDelayMinutes) %>%
filter(DepDelayMinutes > 0) %>%
collect(n = Inf)
flight.df$FlightTime <- as.POSIXct(paste(flight.df$FlightDate, flight.df$DepTime),
tz = Sys.timezone(), format="%Y-%m-%d %H%M")
test <- xts(flight.df$DepDelayMinutes, flight.df$FlightTime)
test.d <- to.daily(test)
#####################################test ############333
flights.df <- flights.df %>%
select(FlightDate, CRSDepTime, DepDelayMinutes, UniqueCarrier, Origin) %>%
filter(UniqueCarrier == "UA") %>%
collect()
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(sidebarMenu(
menuItem("Histogram", tabName = "hist", icon = icon("dashboard")),
menuItem("Boxplot", tabName = "boxplot", icon = icon("th")),
menuItem("Statistical Summary",tabName = "stats",icon = icon("th")),
menuItem("Xbar and Range Chart",tabName = "bar",icon=icon("th")),
menuItem("Data Table",tabName = "data",icon=icon("th")),
menuItem("Process Capabilities",tabName = "process",icon=icon("th"))
)),
dashboardBody(
# Boxes need to be put in a row (or column)
tabItems(
# First tab content
tabItem(tabName = "hist",
fluidRow(box(uiOutput("choose_hist"))),
fluidRow((plotOutput("histPlot",height=450,width = 450)))
),
# Second tab content
tabItem(tabName = "boxplot",
fluidRow((plotOutput("boxPlot",height=450,width = 450)))
),
#statistical summary
tabItem(tabName = "stats",
verbatimTextOutput("summary")
),
#Xbar and range chart
tabItem(tabName = "bar",
fluidRow((plotOutput("xbarPlot",height=450,width=700)))
),
#data table
tabItem(tabName = "data",
fluidPage(fluidRow(column(5,dataTableOutput('table'))))
),
#process
tabItem(tabName="process",
h2("Process Capabilities"))
)
)
)
############################### SERVER ###############################
server <- function(input, output) {
output$choose_hist <- renderUI({
# Get the data set with the appropriate name
options <- unique(flights.df$Origin)
# Create the checkboxes and select them all by default
selectInput("columns", "Choose airport", as.list(options))
})
#histogram
output$histPlot <- renderPlot({
hi <- flights.df %>% filter(Origin==input$columns)
hist(hi$DepDelayMinutes)
})
#boxplot
output$boxPlot <- renderPlot({
hi <- flights.df %>% filter(Origin==input$columns)
boxplot(hi$DepDelayMinutes)
})
#range and mean values
del.mean <- mean(flights.df$DepDelayMinutes,na.rm=TRUE)
del.max <- max(flights.df$DepDelayMinutes,na.rm=TRUE)
del.min <- min(flights.df$DepDelayMinutes,na.rm=TRUE)
del.range <- del.max-del.min
#calculate upper and lower limits
del.ucl <- mean(del.range) + 1.5*sd(del.range)
del.lcl <- mean(del.range) - 1.5*sd(del.range)
mean.del.range <- mean(del.range)
#data table
output$table <- renderDataTable(flights.df)
#xbar chart
output$xbarPlot <- renderPlot({
hi <- flights.df %>% filter (Origin==input$columns)
qcc(hi$DepDelayMinutes,type="xbar.one",nsigmas = 3,ylim=c(0,600))
})
#range chart
output$rangeChart <- renderPlot({
hi <- flights.df %>% filter (origin==input$columns)
})
# descriptive stats
output$summary <- renderPrint({
describe(flights.df)
})
}
shinyApp(ui, server)
#db settings
host = 'localhost'
port = '5432'
dbname = 'flights'
user = 'flights'
pwd = 'flights'
library(dplyr)
library(DBI)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
source("src/dbSettings.R")
flight.db<-dbConnect(drv,
host = host,
port = port,
dbname=dbname,
user=user,
password=pwd)
library(shiny); print(source('C:/Users/turman/Desktop/Q2/804w/class8/src/analyze.R')$value)
setwd("C:/Users/turman/Desktop/Q2/804w/class8")
library(shiny)
library(shinydashboard)
library(psych)
library(dplyr)
library(qcc)
library(ggplot2)
source('src/dbSettings.R')
flights.db <- src_postgres(dbname = dbname,
host = host,
port = port,
user = user,
password = pwd)
flights <- tbl(flights.db, "connections")
########## test ##################
# Check if everything was insert correctly
flights %>%
distinct(Month) %>%
arrange(Month) %>%
collect(n= Inf)
flights.df <- flights %>%
select(DayOfWeek, CRSDepTime, DepDelayMinutes, UniqueCarrier, Origin) %>%
filter(UniqueCarrier == "UA") %>%
collect(n=Inf)
#####################################test ####################
flights.df <- flights.df %>%
select(DayOfWeek, CRSDepTime, DepDelayMinutes, UniqueCarrier, Origin) %>%
filter(UniqueCarrier == "UA") %>%
collect()
# remove na values
flights.df <- flights.df[complete.cases(flights.df),]
################################## BUILD ANALYSIS DATA SET #############################
# pull in random sample for data to use on Xbar range and process capabilites
# sample for first day of week
dset <- flights.df %>%
group_by(DayOfWeek)
set.seed(34)
fl.1 <- flights.df %>%
select(DepDelayMinutes,DayOfWeek) %>%
filter(DayOfWeek == 1)
fl.1 <- fl.1[sample(1:nrow(fl.1),1000,replace=FALSE),][1]
#sample for 2nd day of week
fl.2 <- flights.df %>%
select(DepDelayMinutes,DayOfWeek) %>%
filter(DayOfWeek == 2)
fl.2 <- fl.2[sample(1:nrow(fl.2),1000,replace=FALSE),][1]
# sample 3rd day of week
fl.3 <- flights.df %>%
select(DepDelayMinutes,DayOfWeek) %>%
filter(DayOfWeek == 3)
fl.3 <- fl.3[sample(1:nrow(fl.3),1000,replace=FALSE),][1]
# sample 4th day of week
fl.4 <- flights.df %>%
select(DepDelayMinutes,DayOfWeek) %>%
filter(DayOfWeek == 4)
fl.4 <- fl.4[sample(1:nrow(fl.4),1000,replace=FALSE),][1]
# sample 5th day of week
fl.5 <- flights.df %>%
select(DepDelayMinutes,DayOfWeek) %>%
filter(DayOfWeek == 5)
fl.5 <- fl.5[sample(1:nrow(fl.5),1000,replace=FALSE),][1]
# sample 6th day of week
fl.6 <- flights.df %>%
select(DepDelayMinutes,DayOfWeek) %>%
filter(DayOfWeek == 6)
fl.6 <- fl.6[sample(1:nrow(fl.6),1000,replace=FALSE),][1]
# sample 7th day of week
fl.7 <- flights.df %>%
select(DepDelayMinutes,DayOfWeek) %>%
filter(DayOfWeek == 7)
fl.7 <- fl.7[sample(1:nrow(fl.7),1000,replace=FALSE),][1]
# build data frame of all samples
fl.delays <- data.frame(fl.1,fl.2,fl.3,fl.4,fl.5,fl.6,fl.7)
# assign column names
colnames(fl.delays) <- c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")
rownames(fl.delays) <- NULL
# add x value
fl.delays$x <- c(1:1000)
# calculate range and mean values
fl.delays <- fl.delays %>%
subset(select = 1:8) %>%
mutate(max = do.call(pmax,(.)),
min = do.call(pmin,(.)),
mean = rowMeans(.),
range = do.call(pmax,(.))-do.call(pmin,(.))
)
fl.delaysX.ucl <- mean(fl.delays$mean) + 3*sd(fl.delays$mean)
fl.delaysX.lcl <- mean(fl.delays$mean) - 3*sd(fl.delays$mean)
fl.delays.ucl <- mean(fl.delays$range)+ 1.5 * sd(fl.delays$range)
fl.delays.lcl <- mean(fl.delays$range)- 1.5 * sd(fl.delays$range)
############### UI #####################
ui <- dashboardPage(
dashboardHeader(title = "United Airlines Flight Performance"),
dashboardSidebar(sidebarMenu(
menuItem("Histogram", tabName = "hist", icon = icon("dashboard")),
menuItem("Boxplot", tabName = "boxplot", icon = icon("th")),
menuItem("Statistical Summary",tabName = "stats",icon = icon("th")),
menuItem("Xbar and Range Chart",tabName = "bar",icon=icon("th")),
menuItem("Data Table",tabName = "data",icon=icon("th")),
menuItem("Process Capabilities",tabName = "process",icon=icon("th"))
)),
dashboardBody(
# Boxes need to be put in a row (or column)
tabItems(
# First tab content
tabItem(tabName = "hist",
fluidRow(box(uiOutput("choose_hist"))),
fluidRow((plotOutput("histPlot",height=450,width = 700)))
),
# Second tab content
tabItem(tabName = "boxplot",
fluidRow((plotOutput("boxPlot",height=450,width = 700)))
),
#statistical summary
tabItem(tabName = "stats",
verbatimTextOutput("summary")
),
#Xbar and range chart
tabItem(tabName = "bar",
fluidRow((plotOutput("xbarPlot",height=450,width=700)))
),
#data table
tabItem(tabName = "data",
fluidPage(fluidRow(column(5,dataTableOutput("table"))))
),
#process
tabItem(tabName="process",
fluidRow((plotOutput("procap",height = 450,width = 700)))
))
)
)
############################### SERVER ###############################
server <- function(input, output) {
output$choose_hist <- renderUI({
# Get the data set with the appropriate name
options <- unique(flights.df$Origin)
# Create the checkboxes and select them all by default
selectInput("columns", "Choose airport", as.list(options))
})
#histogram
output$histPlot <- renderPlot({
hi <- flights.df %>% filter(Origin==input$columns)
m <- ggplot(hi, aes(x=DepDelayMinutes))+
geom_histogram(aes(fill = ..count..))
print(m)
})
#boxplot
output$boxPlot <- renderPlot({
hi <- flights.df %>% filter(Origin==input$columns)
p <- ggplot(hi, aes(x=DayOfWeek,y=DepDelayMinutes))+
geom_boxplot(aes(fill = DepDelayMinutes))
print(p)
})
#data table
output$table <- renderDataTable(flights.df)
#xbar chart
output$xbarPlot <- renderPlot({
hi <- data.frame(flights.df %>% filter (Origin==input$columns))
qx <- qcc(hi$DepDelayMinutes,type="xbar.one",nsigmas = 3)
print(qx)
})
#process capabilities
output$procap <- renderPlot({
hi <- flights.df %>% filter (Origin==input$columns)
qx <- qcc(hi$DepDelayMinutes,type="xbar.one",nsigmas = 3)
process.capability(qx,spec.limits = c(fl.delaysX.lcl,fl.delaysX.ucl))
})
#range chart
# output$rangeChart <- renderPlot({
#  hi <- flights.df %>% filter (origin==input$columns)
#  })
# descriptive stats
output$summary <- renderPrint({
describe(flights.df)
})
}
shinyApp(ui, server)
print(source('src/analyze.R')$value)
head(flights.df)
print(source('src/analyze.R')$value)

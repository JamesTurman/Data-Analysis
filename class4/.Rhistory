# Just get the rates for the remaining currencies
A[,i] <- Quandl(codes[i], start_date = start, end_date = end)[,2]
}
}
codes <- paste(db, "EUR", curr, sep="")
# Function to fetch major currency rates
rdQcurr <- function(curr, start, end, db){
# Construct Quandl code for first currency
codes <- paste(db, "EUR", curr, sep="")
# Loop for getting each currency exchange rate
for(i in 1:length(curr)){
# Initialise the storage data frame based on the first result
if (i == 1){
# Select the date from the first currency
d <- Quandl(codes[1], start_date = start, end_date = end)[,1]
A <- array(0,dim=c(length(d), length(codes)))
# Get the rate fom the first curency
A[,1] <- Quandl(codes[1], start_date = start, end_date = end)[,2]
}
else{
# Just get the rates for the remaining currencies
A[,i] <- Quandl(codes[i], start_date = start, end_date = end)[,2]
}
}
# Combine dates and exchange rate data
df <- data.frame(d, A)
# Rename the comlumns
names(df) <- c("DATE", curr)
# Make DATE into type Date
df$DATE <- as.Date(df$DATE)
return(df)
}
codes <- paste(db, "EUR", curr, sep="")
rates <- rdQcurr(currencies, start = start_date, end = end_date, db = database) # Fetch the currency rates
rates.sample <- rates[,c("DATE","USD","AUD")] # Pick out some rates to plot
rates.m <- melt(rates.sample,id="DATE") # Shape data for plottting
ggplot(rates.m, aes(x = DATE, y = value, colour = variable, group = variable)) +
geom_line() +
scale_colour_manual(values = 1:(length(rates4)-1))+
ggtitle("Major Currency Exchange Rates in EUR")
###
### Project:  Quandl Currency Demonstrator
###
### Url:      http://www.kalisch.biz
###
### File:     QuandlCurrencyDemo.R
###
### Author:   Dominik P.H. Kalisch (dkalisch@stmarys-ca.edu)
###
### Desc.:    This script downloads multiple currencies from quandl, saves them into a
###           data frame and plots a time series example.
###           This script is based on a version from Joseph Rickert at
###           http://blog.revolutionanalytics.com/2013/06/a-mini-tutorial-for-quandl.html
###
###
### Modification history
### -------------------------------------------------------------------------------
###
### Date        Version   Who                 Description
### 2016-11-18  0.1       Dominik Kalisch     initial build
###
### Needed R packages:  Quandl
###                     ggplot2
###                     reshape
###
### Needed R files: None
###
# Load required libraries
library(Quandl)					# Quandl package
library(ggplot2)				# Package for plotting
library(reshape2)				# Package for reshaping data
# Set the authentification credentials
token <- 'mSX5bqBSMyNLZ1TWvvs6'			# Sign up with Quandl to get a token
Quandl.api_key(token)				# Authenticate your token
# Set parameter
## Time span
start_date <- "2015-01-01"
end_date <- "2016-11-14"
## Database
database <- "ECB/"
# Currencies to be downloaded
# Codes see https://blog.quandl.com/api-for-currency-data
currencies <- c("AUD", "BRL", "CAD", "CHF", "CNY", "DKK", "GBP", "HKD",
"IDR", "INR", "JPY", "NOK", "PLN", "RUB", "SEK", "USD",
"ZAR")
# Function to fetch major currency rates
rdQcurr <- function(curr, start, end, db){
# Construct Quandl code for first currency
codes <- paste(db, "EUR", curr, sep="")
# Loop for getting each currency exchange rate
for(i in 1:length(curr)){
# Initialise the storage data frame based on the first result
if (i == 1){
# Select the date from the first currency
d <- Quandl(codes[1], start_date = start, end_date = end)[,1]
A <- array(0,dim=c(length(d), length(codes)))
# Get the rate fom the first curency
A[,1] <- Quandl(codes[1], start_date = start, end_date = end)[,2]
}
else{
# Just get the rates for the remaining currencies
A[,i] <- Quandl(codes[i], start_date = start, end_date = end)[,2]
}
}
# Combine dates and exchange rate data
df <- data.frame(d, A)
# Rename the comlumns
names(df) <- c("DATE", curr)
# Make DATE into type Date
df$DATE <- as.Date(df$DATE)
return(df)
}
# Get all excahnge rates
rates <- rdQcurr(currencies, start = start_date, end = end_date, db = database) # Fetch the currency rates
# Prepare data for plotting
rates.sample <- rates[,c("DATE","USD","AUD")] # Pick out some rates to plot
rates.m <- melt(rates.sample,id="DATE") # Shape data for plottting
# Plot
ggplot(rates.m, aes(x = DATE, y = value, colour = variable, group = variable)) +
geom_line() +
scale_colour_manual(values = 1:(length(rates4)-1))+
ggtitle("Major Currency Exchange Rates in EUR")
ggplot(rates.m, aes(x = DATE, y = value, colour = variable, group = variable)) +
geom_line() +
scale_colour_manual(values = 1:(length(rates.m)-1))+
ggtitle("Major Currency Exchange Rates in EUR")
codes <- paste(db, "EUR", curr, sep="")
db <- "ECB/"
codes <- paste(db, "EUR", curr, sep="")
codes <- paste(db, "EUR", curr, sep="")
curr <- c("AUD", "BRL", "CAD", "CHF", "CNY", "DKK", "GBP", "HKD",
"IDR", "INR", "JPY", "NOK", "PLN", "RUB", "SEK", "USD",
"ZAR")
# Construct Quandl code for first currency
codes <- paste(db, "EUR", curr, sep="")
###
### Project:  Quandl Currency Demonstrator
###
### Url:      http://www.kalisch.biz
###
### File:     QuandlCurrencyDemo.R
###
### Author:   Dominik P.H. Kalisch (dkalisch@stmarys-ca.edu)
###
### Desc.:    This script downloads multiple currencies from quandl, saves them into a
###           data frame and plots a time series example.
###           This script is based on a version from Joseph Rickert at
###           http://blog.revolutionanalytics.com/2013/06/a-mini-tutorial-for-quandl.html
###
###
### Modification history
### -------------------------------------------------------------------------------
###
### Date        Version   Who                 Description
### 2016-11-18  0.1       Dominik Kalisch     initial build
###
### Needed R packages:  Quandl
###                     ggplot2
###                     reshape
###
### Needed R files: None
###
# Load required libraries
library(Quandl)					# Quandl package
library(ggplot2)				# Package for plotting
library(reshape2)				# Package for reshaping data
# Set the authentification credentials
token <- 'mSX5bqBSMyNLZ1TWvvs6'			# Sign up with Quandl to get a token
Quandl.api_key(token)				# Authenticate your token
# Set parameter
## Time span
start_date <- "2015-01-01"
end_date <- "2016-11-14"
## Database
db <- "ECB/"
# Currencies to be downloaded
# Codes see https://blog.quandl.com/api-for-currency-data
curr <- c("AUD", "BRL", "CAD", "CHF", "CNY", "DKK", "GBP", "HKD",
"IDR", "INR", "JPY", "NOK", "PLN", "RUB", "SEK", "USD",
"ZAR")
# Function to fetch major currency rates
rdQcurr <- function(curr, start, end, db){
# Construct Quandl code for first currency
codes <- paste(db, "EUR", curr, sep="")
# Loop for getting each currency exchange rate
for(i in 1:length(curr)){
# Initialise the storage data frame based on the first result
if (i == 1){
# Select the date from the first currency
d <- Quandl(codes[1], start_date = start, end_date = end)[,1]
A <- array(0,dim=c(length(d), length(codes)))
# Get the rate fom the first curency
A[,1] <- Quandl(codes[1], start_date = start, end_date = end)[,2]
}
else{
# Just get the rates for the remaining currencies
A[,i] <- Quandl(codes[i], start_date = start, end_date = end)[,2]
}
}
# Combine dates and exchange rate data
df <- data.frame(d, A)
# Rename the comlumns
names(df) <- c("DATE", curr)
# Make DATE into type Date
df$DATE <- as.Date(df$DATE)
return(df)
}
# Get all excahnge rates
rates <- rdQcurr(currencies, start = start_date, end = end_date, db = database) # Fetch the currency rates
# Prepare data for plotting
rates.sample <- rates[,c("DATE","USD","AUD")] # Pick out some rates to plot
rates.m <- melt(rates.sample,id="DATE") # Shape data for plottting
# Plot
ggplot(rates.m, aes(x = DATE, y = value, colour = variable, group = variable)) +
geom_line() +
scale_colour_manual(values = 1:(length(rates.m)-1))+
ggtitle("Major Currency Exchange Rates in EUR")
codes
d
for(i in 1:length(curr)){
# Initialise the storage data frame based on the first result
if (i == 1){
# Select the date from the first currency
d <- Quandl(codes[1], start_date = start, end_date = end)[,1]
A <- array(0,dim=c(length(d), length(codes)))
# Get the rate fom the first curency
A[,1] <- Quandl(codes[1], start_date = start, end_date = end)[,2]
}
else{
# Just get the rates for the remaining currencies
A[,i] <- Quandl(codes[i], start_date = start, end_date = end)[,2]
}
}
# Combine dates and exchange rate data
df <- data.frame(d, A)
# Rename the comlumns
names(df) <- c("DATE", curr)
# Make DATE into type Date
df$DATE <- as.Date(df$DATE)
return(df)
}
if (i == 1){
# Select the date from the first currency
d <- Quandl(codes[1], start_date = start, end_date = end)[,1]
A <- array(0,dim=c(length(d), length(codes)))
# Get the rate fom the first curency
A[,1] <- Quandl(codes[1], start_date = start, end_date = end)[,2]
}
else{
# Just get the rates for the remaining currencies
A[,i] <- Quandl(codes[i], start_date = start, end_date = end)[,2]
}
}
rdQcurr <- function(curr, start, end, db){
# Construct Quandl code for first currency
codes <- paste(db, "EUR", curr, sep="")
# Loop for getting each currency exchange rate
for(i in 1:length(curr)){
# Initialise the storage data frame based on the first result
if (i == 1){
# Select the date from the first currency
d <- Quandl(codes[1], start_date = start, end_date = end)[,1]
A <- array(0,dim=c(length(d), length(codes)))
# Get the rate fom the first curency
A[,1] <- Quandl(codes[1], start_date = start, end_date = end)[,2]
}
else{
# Just get the rates for the remaining currencies
A[,i] <- Quandl(codes[i], start_date = start, end_date = end)[,2]
}
}
# Combine dates and exchange rate data
df <- data.frame(d, A)
# Rename the comlumns
names(df) <- c("DATE", curr)
# Make DATE into type Date
df$DATE <- as.Date(df$DATE)
return(df)
}
head(df)
curr
rates
head(rates)
View(rates.m)
View(rates.sample)
View(rates)
install.packages("XML")
install.packages("Lubridate")
install.packages("lubridate")
library(XML) # For scraping the HTML tables
library(dplyr) # Data manipulation library
library(lubridate)
url.pro.football <- "ops804.github.io/2015.html"
## Get the raw HTML data
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
library(XML) # For scraping the HTML tables
library(dplyr) # Data manipulation library
library(lubridate) # For data manipulation
# Harvest data
url.pro.football <- "ops804.github.io/2015.html"
## Get the raw HTML data
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
url.pro.football <- "https://ops804.github.io/2015.html"
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
# Harvest data
url.pro.football <- "http://www.pro-football-reference.com/years/2015/games.html"
###
### Project:  NFL Sports Analytics
###
### Url:      http://www.kalisch.biz
###
### File:     HarvestProFootballResults.R
###
### Author:   Dominik P.H. Kalisch (dkalisch@stmarys-ca.edu)
###
### Desc.:    This script scrapes the data from pro-football-reference.com
###           and saves the results in a postgres database.
###           Currently only the game results are scraped and saved.
###
###
### Modification history
### -------------------------------------------------------------------------------
###
### Date        Version   Who                 Description
### 2015-12-03  0.1       Dominik Kalisch     initial build
### 2016-01-30  0.11      Mark Sharp          Enhanced robustness of database code
### 2016-02-02  0.12      Mark Sharp          Added use of stringi, arguments to
###                                           readHTMLTable, and whitespace
### 2015-02-09  0.13      Dominik Kalisch     Fixed date bug
### 2016-11-18  0.14      Dominik Kalisch     Adjusted to Saint Mary's College class
###
### Needed R packages:  XML
###                     dplyr
###                     lubridate
###
###
# Load needded libraries
library(XML) # For scraping the HTML tables
library(dplyr) # Data manipulation library
library(lubridate) # For data manipulation
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
df.games <- df.games[-grep("Date", df.games$Date), ]
if (!is.null(grep("Playoffs", df.games$Date))) {
df.games <- df.games[-grep("Playoffs", df.games$Date), ]
}
names(df.games) <- c("Week", "Day", "Date", "Time", "Winner/tie", "At", "Loser/tie", "boxscore",
"PtsW", "PtsL", "YdsW", "TOW", "YdsL", "TOL")
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
install.packages("devtools")
install.packages("json")
install.packages("Json")
clear
cls
library(lubridate)
url.pro.football <- "http://www.pro-football-reference.com/years/2015/games.htm"
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
url.pro.football <- "http://www.pro-football-reference.com/years/2015/games.html"
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
url.pro.football <- stri_c("http://www.pro-football-reference.com/years/2015/games.htm")
## Get the raw HTML data
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
url.pro.football <- "http://www.pro-football-reference.com/years/2015/games.htm"
tables <- readHTMLTable(url.pro.football, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
url.pro.football <- c("http://www.pro-football-reference.com/years/2015/games.htm")
url.pro.football
url.pro.football <- "http://www.pro-football-reference.com/years/2015/games.htm"
url.pro.football
library(XML)
install.packages("XML")
install.packages("XML")
library(XML)
library(XML)
## Clean up data
### Remove additional headlines, playoff games, by week, and blank lines
df.games <- df.games[-grep("Date", df.games$Date), ]
if (!is.null(grep("Playoffs", df.games$Date))) {
df.games <- df.games[-grep("Playoffs", df.games$Date), ]
}
### Add missing header names
names(df.games) <- c("Week", "Day", "Date", "Time", "Winner/tie", "At", "Loser/tie", "boxscore",
"PtsW", "PtsL", "YdsW", "TOW", "YdsL", "TOL")
### Set correct variable types
df.games$PtsW <- as.numeric(df.games$PtsW)
df.games$PtsL <- as.numeric(df.games$PtsL)
df.games$YdsW <- as.numeric(df.games$YdsW)
df.games$TOW <- as.numeric(df.games$TOW)
df.games$YdsL <- as.numeric(df.games$YdsL)
df.games$TOL <- as.numeric(df.games$TOL)
df.games$Date <- as.Date(df.games$Date, "%B %d")
year(df.games$Date[month(df.games$Date) < 7]) <- 2016
year(df.games$Date[month(df.games$Date) > 7]) <- 2015
df.games$`Winner/tie` <- as.character(df.games$`Winner/tie`)
df.games$`Loser/tie` <- as.character(df.games$`Loser/tie`)
## Recode data
### Add new variables to code away vs. home
df.games$Home <- NA
df.games$Away <- NA
df.games$PtsH <- NA
df.games$PtsA <- NA
df.games$YdsH <- NA
df.games$TOH  <- NA
df.games$YdsA <- NA
df.games$TOA  <- NA
### Switch team names and results according to game location
asterisk <- df.games$At == "@"
df.games$Home[asterisk] <- df.games$`Loser/tie`[asterisk]
df.games$PtsH[asterisk] <- df.games$PtsL[asterisk]
df.games$Away[asterisk] <- df.games$`Winner/tie`[asterisk]
df.games$PtsA[asterisk] <- df.games$PtsW[asterisk]
df.games$YdsH[asterisk] <- df.games$YdsL[asterisk]
df.games$TOH[asterisk] <- df.games$TOL[asterisk]
df.games$YdsA[asterisk] <- df.games$YdsW[asterisk]
df.games$TOA[asterisk] <- df.games$TOW[asterisk]
df.games$Home[!asterisk] <- df.games$`Winner/tie`[!asterisk]
df.games$PtsH[!asterisk] <- df.games$PtsW[!asterisk]
df.games$Away[!asterisk] <- df.games$`Loser/tie`[!asterisk]
df.games$PtsA[!asterisk] <- df.games$PtsL[!asterisk]
df.games$YdsH[!asterisk] <- df.games$YdsW[!asterisk]
df.games$TOH[!asterisk] <- df.games$TOW[!asterisk]
df.games$YdsA[!asterisk] <- df.games$YdsL[!asterisk]
df.games$TOA[!asterisk] <- df.games$TOL[!asterisk]
### Remove unessesary columns
df.games$At <- NULL
df.games$boxscore <- NULL
df.games$Day <- NULL
df.games$`Winner/tie` <- NULL
df.games$`Loser/tie` <- NULL
df.games$PtsW <- NULL
df.games$PtsL <- NULL
df.games$YdsW <- NULL
df.games$YdsL <- NULL
df.games$TOW <- NULL
df.games$TOL <- NULL
View(df.games)
install.packages("stringi")
library(XML) # For scraping the HTML tables
library(dplyr) # Data manipulation library
library(lubridate) # For data manipulation
library(stringi) # Provides a host of string opperations
url.mlb <- "http://www.espn.com/mlb/standings"
## Get the raw HTML data
tables <- readHTMLTable(url.mlb, header = TRUE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
# Harvest data
url.mlb <- "http://www.espn.com/mlb/standings"
## Get the raw HTML data
tables <- readHTMLTable(url.mlb, header = TRUE,
stringsAsFactors = FALSE)
## Get the raw HTML data
tables <- readHTMLTable(url.mlb, header = FALSE,
stringsAsFactors = FALSE)
df.games <- tables[["games"]]
df.games <- tables[["games"]]
head(tables)
tables
df.games <- data.frame(tables)
View(df.games)
standings.df <- data.frame(tables)
library(reshape)
standings.me <- melt(standings.df, id = "NULL.V1")
View(standings.me)
standings.me <- tables[1:13]
standings.df <- data.frame(tables)
standings.me <- tables[1:13]
standings.me <- data.fram(tables[1:13])
standings.me <- data.frame(tables[1:13])
# Harvest data
url.mlb <- "http://www.espn.com/mlb/standings"
## Get the raw HTML data
tables <- readHTMLTable(url.mlb, header = FALSE,
stringsAsFactors = FALSE)
standings.df <- data.frame(tables)
standings.me <- tables[1:13]
standings.me <- tables[,13]
standings.me <- tables[1,13]
standings.me <- standings.df[1,13]
View(standings.df)
standings.df <- data.frame(tables)
standings.me <- standings.df[1,13]
head(standings.me)
standings.me <- data.frame(standings.df[1,13])
View(standings.me)
standings.me <- standings.df$NULL.V1
standings.me
library(dplyr)
standings.me <- standings.df %>%
select(Null.V1,NULL.V2,NULL.V3)
tables <- readHTMLTable(url.mlb, header = FALSE,
stringsAsFactors = FALSE)
tables
standings.df <- data.frame(tables)
standings.df$NULL.V1
standings.df$NULL.V3
